import type { AppRouter } from "@acme/api";
import { Button } from "@acme/ui";
import type { inferProcedureOutput } from "@trpc/server";
import type { NextPage } from "next";
import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
import Image from "next/image";
import { trpc } from "../utils/trpc";

const PostCard: React.FC<{
  post: inferProcedureOutput<AppRouter["post"]["all"]>[number];
}> = ({ post }) => {
  return (
    <div className="max-w-2xl rounded-lg border-2 border-gray-500 p-4">
      <h2 className="text-2xl font-bold text-gray-800">{post.title}</h2>
      <p className="text-gray-600">{post.content}</p>
    </div>
  );
};

const Home: NextPage = () => {
  const postQuery = trpc.post.all.useQuery();

  return (
    <>
      <Head>
        <title>Web | turbo-nextjs-template</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <h1 className="text-center text-5xl font-extrabold leading-normal text-gray-700 md:text-[5rem]">
        Turbo Next.js Template
        <br />
        <span className="text-green-500">WEB</span>
      </h1>
      <Image
        alt="logo"
        width={200}
        height={200}
        src="https://picsum.photos/200"
      />

      <div className="flex w-full items-center justify-center pt-6 text-2xl text-green-500">
        {postQuery.data ? (
          <div className="flex flex-col gap-4">
            {postQuery.data?.map((p) => {
              return <PostCard key={p.id} post={p} />;
            })}
          </div>
        ) : (
          <p>Loading..</p>
        )}
      </div>
      <AuthShowcase />
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: secretMessage } = trpc.auth.getSecretMessage.useQuery();

  const { data: sessionData } = useSession();

  return (
    <div className="flex flex-col items-center justify-center gap-2">
      {sessionData && (
        <>
          <p className="text-2xl text-blue-500">
            Logged in as {sessionData?.user?.name}
          </p>
          <p className="text-sm text-gray-500">
            User Id: {sessionData?.user?.id}
          </p>
        </>
      )}
      {secretMessage && (
        <p className="text-2xl text-blue-500">{secretMessage}</p>
      )}
      <Button onClick={sessionData ? () => signOut() : () => signIn()}>
        {sessionData ? "Sign out" : "Sign in"}
      </Button>
    </div>
  );
};
